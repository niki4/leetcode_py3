"""
You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
"""
from collections import Counter


class Solution:
    """
    Algorithm: calculate sums of codepoints for each string, then find the diff (codepoint) which translate back to char

    Runtime: 32 ms, faster than 82.65% of Python3
    Memory Usage: 14.2 MB, less than 66.58% of Python3

    Time complexity: O(m + n) where m is length of s and n is length of t
    Space complexity: O(1)
    """

    def sum_codepoints(self, s: str) -> int:
        return sum(ord(ch) for ch in s)

    def findTheDifference(self, s: str, t: str) -> str:
        return chr(self.sum_codepoints(t) - self.sum_codepoints(s))


class Solution2:
    """
    Algorithm: compare count for each char in both strings

    Runtime: 24 ms, faster than 98.71% of Python3
    Memory Usage: 14.2 MB, less than 87.06% of Python3

    Time complexity: O(m + n) where m is length of s and n is length of t
    Space complexity: O(m + n)
    """

    def findTheDifference(self, s: str, t: str) -> str:
        s_ctr = Counter(s)
        t_ctr = Counter(t)
        for ch in t_ctr:
            if ch not in s_ctr or t_ctr[ch] > s_ctr[ch]:
                return ch


class Solution3:
    """
    Algorithm: sort lists, then compare values at the same indexes, if there diff - we found new value

    Time complexity: O(2 * (n logN)) which turns to O(n logN) because of sorting lists
    Space complexity: O(m + n) for storing sorted lists

    Runtime: 36 ms, faster than 59.64% of Python3
    Memory Usage: 14.2 MB, less than 87.06% of Python3
    """

    def findTheDifference(self, s: str, t: str) -> str:
        s_srtd = sorted(s)
        t_srtd = sorted(t)
        i = 0
        while i < len(s_srtd):
            if s_srtd[i] != t_srtd[i]:
                return t_srtd[i]
            i += 1
        return t_srtd[i]  # case added char not present in s_srtd


if __name__ == '__main__':
    solutions = [Solution(), Solution2(), Solution3()]
    tc = (
        ("abcd", "abcde", "e"),
        ("", "y", "y"),
        ("a", "aa", "a"),
        ("ae", "aea", "a"),
    )
    for sol in solutions:
        for inp_s, inp_t, exp in tc:
            res = sol.findTheDifference(inp_s, inp_t)
            assert res == exp, f"{sol.__class__.__name__}: for inp s={inp_s}, t={inp_t} - expected {exp}, got {res}"
